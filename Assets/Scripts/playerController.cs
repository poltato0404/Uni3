//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/playerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerController"",
    ""maps"": [
        {
            ""name"": ""Player_actionmap"",
            ""id"": ""ad6c0cfe-e8e0-429c-90c1-a3116b7b7f96"",
            ""actions"": [
                {
                    ""name"": ""movePlayer"",
                    ""type"": ""Value"",
                    ""id"": ""11de4d81-87d1-4e0c-b8a6-5b87e5560821"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""lookAround"",
                    ""type"": ""Value"",
                    ""id"": ""7371325c-65a1-4edf-a8dd-ed75f03f0343"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""flash"",
                    ""type"": ""Button"",
                    ""id"": ""8e92aba3-a3de-44e5-9c21-ea362c104111"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sprint"",
                    ""type"": ""Button"",
                    ""id"": ""9235808b-2bc5-4d39-8332-616046e2646e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""762720c9-dd7b-46d7-9806-0593a985211b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5e0cc90-f232-42c1-9c96-48897a1a364e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b17b8b95-883f-49c3-b2e3-151cc4b73018"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb30c661-c1dd-4a00-accb-bfdd247c7790"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_actionmap
        m_Player_actionmap = asset.FindActionMap("Player_actionmap", throwIfNotFound: true);
        m_Player_actionmap_movePlayer = m_Player_actionmap.FindAction("movePlayer", throwIfNotFound: true);
        m_Player_actionmap_lookAround = m_Player_actionmap.FindAction("lookAround", throwIfNotFound: true);
        m_Player_actionmap_flash = m_Player_actionmap.FindAction("flash", throwIfNotFound: true);
        m_Player_actionmap_sprint = m_Player_actionmap.FindAction("sprint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_actionmap
    private readonly InputActionMap m_Player_actionmap;
    private List<IPlayer_actionmapActions> m_Player_actionmapActionsCallbackInterfaces = new List<IPlayer_actionmapActions>();
    private readonly InputAction m_Player_actionmap_movePlayer;
    private readonly InputAction m_Player_actionmap_lookAround;
    private readonly InputAction m_Player_actionmap_flash;
    private readonly InputAction m_Player_actionmap_sprint;
    public struct Player_actionmapActions
    {
        private @PlayerController m_Wrapper;
        public Player_actionmapActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @movePlayer => m_Wrapper.m_Player_actionmap_movePlayer;
        public InputAction @lookAround => m_Wrapper.m_Player_actionmap_lookAround;
        public InputAction @flash => m_Wrapper.m_Player_actionmap_flash;
        public InputAction @sprint => m_Wrapper.m_Player_actionmap_sprint;
        public InputActionMap Get() { return m_Wrapper.m_Player_actionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_actionmapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_actionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_actionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_actionmapActionsCallbackInterfaces.Add(instance);
            @movePlayer.started += instance.OnMovePlayer;
            @movePlayer.performed += instance.OnMovePlayer;
            @movePlayer.canceled += instance.OnMovePlayer;
            @lookAround.started += instance.OnLookAround;
            @lookAround.performed += instance.OnLookAround;
            @lookAround.canceled += instance.OnLookAround;
            @flash.started += instance.OnFlash;
            @flash.performed += instance.OnFlash;
            @flash.canceled += instance.OnFlash;
            @sprint.started += instance.OnSprint;
            @sprint.performed += instance.OnSprint;
            @sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IPlayer_actionmapActions instance)
        {
            @movePlayer.started -= instance.OnMovePlayer;
            @movePlayer.performed -= instance.OnMovePlayer;
            @movePlayer.canceled -= instance.OnMovePlayer;
            @lookAround.started -= instance.OnLookAround;
            @lookAround.performed -= instance.OnLookAround;
            @lookAround.canceled -= instance.OnLookAround;
            @flash.started -= instance.OnFlash;
            @flash.performed -= instance.OnFlash;
            @flash.canceled -= instance.OnFlash;
            @sprint.started -= instance.OnSprint;
            @sprint.performed -= instance.OnSprint;
            @sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IPlayer_actionmapActions instance)
        {
            if (m_Wrapper.m_Player_actionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_actionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_actionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_actionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_actionmapActions @Player_actionmap => new Player_actionmapActions(this);
    public interface IPlayer_actionmapActions
    {
        void OnMovePlayer(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
        void OnFlash(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
}
